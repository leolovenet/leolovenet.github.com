<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WordPress | 末日前几天]]></title>
  <link href="http://leolovenet.com/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://leolovenet.com/"/>
  <updated>2014-02-13T12:28:37+08:00</updated>
  <id>http://leolovenet.com/</id>
  <author>
    <name><![CDATA[leolovenet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[手工编译安装Mysql+Nginx+PHP+CentOS+wordpress]]></title>
    <link href="http://leolovenet.com/blog/2012/12/19/mysql-nginx-php-linux-wordpress/"/>
    <updated>2012-12-19T00:00:00+08:00</updated>
    <id>http://leolovenet.com/blog/2012/12/19/mysql-nginx-php-linux-wordpress</id>
    <content type="html"><![CDATA[<p>首先,关于这个组合非常的出名,(早先是apache用做web服务,后被nginx篡位), 他们的好处就不细讲了,具体的可以看一下<a href="http://blog.s135.com/nginx_php_v6/" title="张宴" target="_blank">张宴同学的Nginx 0.8.x + PHP 5.2.13（FastCGI）搭建胜过Apache十倍的Web服务器（第6版）[原创]</a>,那篇文章写的很详细,不过有段时间没有更新了,有些软件有些老,而且我的搭建环境是在CentOS(x86_64)位下,有一些不同的地方.<br/>
OK, Next.
安装步骤为先安装Mysql, 然后PHP, 然后Nginx, 最后讲一下nginx下配置worldpress时怎样修改配置文件.<br/>
顺便说一下,本文中提到的所有开源软件截止到<span style="color:red;">2012年12月21日</span>,全部为最新<strong>稳定版</strong>.</p>

<p>本文提及的所有的软件全部下载到了<code>/data/packages/</code>目录下.
本文提及的所有的软件全部安装到了<code>/data/webservers/</code>目录下.
(如果你的安装环境跟本文有出处的话,只需要在下面的初始环境命令中更换变量<code>{TEMP_DIR_PACKAGES|TEMP_DIR_WEBSERVERS}</code>即可)
本文所有安装的新服务都会利用<code>chkconfig</code>添加到系统启动服务里,确保机器重启后服务能够自动启动.<br/>
本文所有安装好的新服务都可以利用标准的命令格式<code>/etc/init.d/XXX {start|stop|restart|reload}</code>进行手工的<code>{start|stop|restart|reload}</code><br/>
Ready Go.<br/>
初步准备,利用CentOS系统自带的yum命令安装、升级所需的程序库,建立基本目录,构建初始环境.</p>

<!--more-->


<p><code>bash
mkdir -p /data/packages
mkdir -p /data/webservers
export TEMP_DIR_PACKAGES=/data/packages
export TEMP_DIR_WEBSERVERS=/data/webservers
yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel openldap-clients openldap-servers cmake
</code></p>

<p>敲入回车之后,让yum飞一会&hellip; &hellip;</p>

<h2>Mysql</h2>

<p>我们第一个要安装mysql,全部安装命令如下,注意我把下载的压缩包的详细版本换成了<code>*</code>,这样有助与解决小版本的不同,可能你下载的mysql会升级小版本号:</p>

<p>``` bash
cd $TEMP_DIR_PACKAGES
wget <a href="http://dev.mysql.com/downloads/mirror.php?id=411115">http://dev.mysql.com/downloads/mirror.php?id=411115</a>
tar -zxf mysql-5.5.<em>.tar.gz
cd mysql-5.5.</em>
groupadd mysql
useradd -r -g mysql mysql
cmake -D  CMAKE_INSTALL_PREFIX:PATH=$TEMP_DIR_WEBSERVERS/mysql/  -D MYSQL_DATADIR:PATH=$TEMP_DIR_WEBSERVERS/mysql/data/ .
make
make install</p>

<p>echo &ldquo;$TEMP_DIR_WEBSERVERS/mysql/lib/&rdquo; >> /etc/ld.so.conf.d/webservers.conf
/sbin/ldconfig</p>

<p>cd $TEMP_DIR_WEBSERVERS/mysql/
chown -R mysql .
chgrp -R mysql .
scripts/mysql_install_db &mdash;user=mysql
chown -R root .
chown -R mysql data
cp support-files/my-medium.cnf /etc/my.cnf
cp support-files/mysql.server /etc/init.d/mysql.server
chkconfig &mdash;add mysql.server
chkconfig &mdash;list mysql.server
/etc/init.d/mysql.server start
```</p>

<p>上面最后一行命令就是用我说的标准启动服务格式,开启mysql服务.当然你也可以用<code>service xxx start</code>这种格式.<br/>
下面的的命令是可选的,你也可以不这样做,但是还是建议看一下,毕竟没有坏处只有好处.<br/>
<strong>Next command is optional</strong></p>

<p>``` bash</p>

<h1>运行脚本,给mysql的root用户设置密码,删除测试的用户和测试数据库</h1>

<p>$TEMP_DIR_WEBSERVERS/mysql/bin/mysql_secure_installation</p>

<h1>修改mysql配置文件,让它避免中文乱码问题</h1>

<p>vim /etc/my.cnf</p>

<h1>在[client]后面添加</h1>

<p>default-character-set = utf8</p>

<h1>在[mysqld]后面添加</h1>

<p>character-set-server = utf8</p>

<h1>用你刚刚设置的root密码登陆mysql,为mysql创建一个新的用户</h1>

<p>$TEMP_DIR_WEBSERVERS/mysql/bin/mysql -uroot -p
GRANT ALL PRIVILEGES ON <em>.</em> TO &lsquo;leolovenet&rsquo;@&lsquo;%&rsquo; IDENTIFIED BY &lsquo;123&rsquo;;
```</p>

<h2>安装php的依赖软件</h2>

<p>``` bash
cd $TEMP_DIR_PACKAGES</p>

<p>wget <a href="http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz">http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</a>
tar zxf libiconv-1.14.tar.gz
cd libiconv-1.14/
./configure
make
make install
cd ../</p>

<p>wget <a href="http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download">http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download</a>
tar zxf libmcrypt-2.5.8.tar.gz
cd libmcrypt-2.5.8/
./configure
make
make install
echo &ldquo;/usr/local/lib/&rdquo; >> /etc/ld.so.conf.d/webservers.conf
/sbin/ldconfig
cd libltdl/
./configure &mdash;enable-ltdl-install
make
make install
cd ../../</p>

<p>wget <a href="http://sourceforge.net/projects/mhash/files/latest/download">http://sourceforge.net/projects/mhash/files/latest/download</a>
tar zxvf mhash-<em>.tar.gz
cd mhash-</em>/
./configure
make
make install
cd ../</p>

<p>wget <a href="http://sourceforge.net/projects/mcrypt/files/latest/download">http://sourceforge.net/projects/mcrypt/files/latest/download</a>
tar zxvf mcrypt-<em>.tar.gz
cd mcrypt-</em>/
/sbin/ldconfig
./configure
make
make install
cd ../
```</p>

<h2>安装php</h2>

<p>因为我的机器是x86_64位环境,所以在配置php的时候加入了<code>--with-libdir=lib64</code>选项.<br/>
此时,php会检查mysql的<code>$TEMP_DIR_WEBSERVERS/mysql/lib64</code>目录,而不是<code>$TEMP_DIR_WEBSERVERS/mysql/lib</code>目录,所以我们加入了一个软链接</p>

<p>``` bash
ln -s $TEMP_DIR_WEBSERVERS/mysql/lib $TEMP_DIR_WEBSERVERS/mysql/lib64</p>

<p>cd $TEMP_DIR_PACKAGES
wget <a href="http://cn2.php.net/get/php-5.3.20.tar.gz/from/this/mirror">http://cn2.php.net/get/php-5.3.20.tar.gz/from/this/mirror</a>
tar zxf php-5.3.20.tar.gz
cd php-5.3.20
./configure &mdash;prefix=$TEMP_DIR_WEBSERVERS/php &mdash;with-config-file-path=$TEMP_DIR_WEBSERVERS/php/etc &mdash;with-mysql=$TEMP_DIR_WEBSERVERS/mysql &mdash;with-mysqli=$TEMP_DIR_WEBSERVERS/mysql/bin/mysql_config &mdash;with-iconv-dir=/usr/local &mdash;with-freetype-dir &mdash;with-jpeg-dir &mdash;with-png-dir &mdash;with-zlib &mdash;with-libxml-dir=/usr &mdash;enable-xml &mdash;disable-rpath  &mdash;enable-safe-mode &mdash;enable-bcmath &mdash;enable-shmop &mdash;enable-sysvsem &mdash;enable-inline-optimization &mdash;with-curl &mdash;with-curlwrappers &mdash;enable-mbregex  &mdash;enable-fpm  &mdash;enable-mbstring &mdash;with-mcrypt &mdash;with-gd &mdash;enable-gd-native-ttf &mdash;with-openssl &mdash;with-mhash &mdash;enable-pcntl &mdash;enable-sockets &mdash;with-ldap &mdash;with-ldap-sasl &mdash;with-xmlrpc &mdash;enable-zip &mdash;enable-soap &mdash;enable-sqlite-utf8 &mdash;with-libdir=lib64
make ZEND_EXTRA_LIBS=&lsquo;-liconv&rsquo;
make install
cp $TEMP_DIR_PACKAGES/php-5.3.20/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
chmod 755 /etc/init.d/php-fpm
chkconfig &mdash;add php-fpm
cp $TEMP_DIR_PACKAGES/php-5.3.20/php.ini-production $TEMP_DIR_WEBSERVERS/php/etc/php.ini
cp $TEMP_DIR_WEBSERVERS/php/etc/php-fpm.conf.default $TEMP_DIR_WEBSERVERS/php/etc/php-fpm.conf</p>

<h1>手工修改php.ini文件,vim $TEMP_DIR_WEBSERVERS/php/etc/php.ini</h1>

<h1>修改cgi.fix_pathinfo=0,防止Nginx文件类型错误解析漏洞.</h1>

<h1>手工修改vim $TEMP_DIR_WEBSERVERS/php/etc/php-fpm.ini文件,根据自己机器的内存大小,修改php-fpm开启的运行进程数</h1>

<h1>pm.max_spare_servers = 5</h1>

<p>/etc/init.d/php-fpm start
```</p>

<h2>Nginx</h2>

<p>``` bash
wget <a href="http://sourceforge.net/projects/pcre/files/latest/download">http://sourceforge.net/projects/pcre/files/latest/download</a>
tar zxf pcre-<em>
cd pcre-</em>/
./configure
make &amp;&amp; make install
cd ../</p>

<p>wget <a href="http://nginx.org/download/nginx-1.2.6.tar.gz">http://nginx.org/download/nginx-1.2.6.tar.gz</a>
./configure &mdash;user=www &mdash;group=www &mdash;prefix=$TEMP_DIR_WEBSERVERS/nginx &mdash;with-http_stub_status_module &mdash;with-http_ssl_module<br/>
make &amp;&amp; make install
cd $TEMP_DIR_WEBSERVERS/nginx/conf
mkdir global
mkdir vhost
mkdir -p $TEMP_DIR_WEBSERVERS/www/other/
mv nginx.conf nginx.conf.org
```</p>

<p>手工编辑 <code>vim $TEMP_DIR_WEBSERVERS/nginx/conf/nginx.conf</code>,输入下面的内容.<br/>
注意下面内容的路径<code>/data/webservers</code>,如果你的环境不同,请手工更换.</p>

<pre>
user  www www;
#ususally equal to number of CPU's you have. run command "grep processor /proc/cpuinfo | wc -l" to find it
worker_processes  1;
error_log  /data/webservers/nginx/logs/nginx_error.log  crit;
pid        /data/webservers/nginx/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process. 
#worker_rlimit_nofile 65535;

events {
    #use epoll;
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
      
    #rewrite_log on;
    sendfile on;
    #tcp_nopush     on;
    keepalive_timeout 3;
    #tcp_nodelay on;
    
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
  
    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    #php max upload limit cannot be larger than this       
    client_max_body_size 13m;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
      
    index  index.php index.html index.htm;
  # Upstream to abstract backend connection(s) for PHP.
    upstream php {
                #this should match value of "listen" directive in php-fpm pool
                #server unix:/tmp/php-fpm.sock;
                server 127.0.0.1:9000;
      }

    log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
              '$status $body_bytes_sent "$http_referer" '
              '"$http_user_agent" $http_x_forwarded_for';

    server  {
        listen       80;
        server_name  bbkanba.com  www.bbkanba.com;
        charset utf-8;
      root      /data/webservers/www/other/;
      access_log  /data/webservers/nginx/logs/access.log  access;
    
    include   global/restrictions.conf;
    include   global/php.conf;
    } 
  include vhost/*.conf;
}
</pre>


<p>进入到<code>cd $TEMP_DIR_WEBSERVERS/nginx/conf/global/</code>,创建php.conf,输入下面的内容:</p>

<pre>
# Pass all .php files onto a php-fpm/php-fcgi server.
location ~ \.php$ {
    # Zero-day exploit defense.
    # http://forum.nginx.org/read.php?2,88845,page=3
    # Won't work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.
    # Comment the 'try_files' line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won't get hacked.
    try_files $uri =404;

    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

    include fastcgi_params;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #fastcgi_intercept_errors on;
    fastcgi_pass php;
}
</pre>


<p>继续创建restrictions.conf,输入下面的内容:</p>

<pre>
# Global restrictions configuration file.
# Designed to be included in any server {} block.

location = /favicon.ico {
  log_not_found off;
  access_log off;
}

location = /robots.txt {
  allow all;
  log_not_found off;
  access_log off;
}

# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~ /\. {
  deny all;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
  deny all;
}
</pre>


<p>配置文件创建完毕,为了遵循我们之前说的,可以用<code>/etc/init.d/XXX {start|stop|restart|reload}</code>这种格式进行服务的控制,需要手工创建脚本,<br/>
<code>vim /etc/init.d/nginx</code>,输入下面内容:<br/>
注意下面内容的路径<code>/data/webservers</code>,如果你的环境不同,请手工更换.</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<h1>nginx &ndash; this script starts and stops the nginx daemon</h1>

<p>#</p>

<h1>chkconfig:   &ndash; 85 15</h1>

<h1>Required-Start:    $remote_fs $network</h1>

<h1>Required-Stop:     $remote_fs $network</h1>

<h1>Default-Start:     2 3 4 5</h1>

<h1>Default-Stop:      0 1 6</h1>

<h1>description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</h1>

<h1>proxy and IMAP/POP3 proxy server</h1>

<h1>processname: nginx</h1>

<h1>config:      /data/webservers/nginx/conf/nginx.conf</h1>

<h1>pidfile:     /data/webservers/nginx/nginx.pid</h1>

<h1>Source function library.</h1>

<p>. /etc/rc.d/init.d/functions</p>

<h1>Source networking configuration.</h1>

<p>. /etc/sysconfig/network</p>

<h1>Check that networking is up.</h1>

<p>[ &ldquo;$NETWORKING&rdquo; = &ldquo;no&rdquo; ] &amp;&amp; exit 0</p>

<p>nginx=&ldquo;/data/webservers/nginx/sbin/nginx&rdquo;
prog=$(basename $nginx)</p>

<p>NGINX_CONF_FILE=&ldquo;/data/webservers/nginx/conf/nginx.conf&rdquo;</p>

<p>[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</p>

<p>lockfile=/var/lock/subsys/nginx</p>

<p>make_dirs() {
   # make required directories
   user=<code>$nginx -V 2&gt;&amp;1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -</code>
   if [ -z &ldquo;<code>grep $user /etc/passwd</code>&rdquo; ]; then</p>

<pre><code>   useradd -M -s /bin/nologin $user
</code></pre>

<p>   fi
   options=<code>$nginx -V 2&gt;&amp;1 | grep 'configure arguments:'</code>
   for opt in $options; do</p>

<pre><code>   if [ `echo $opt | grep '.*-temp-path'` ]; then
       value=`echo $opt | cut -d "=" -f 2`
       if [ ! -d "$value" ]; then
           # echo "creating" $value
           mkdir -p $value &amp;&amp; chown -R $user $value
       fi
   fi
</code></pre>

<p>   done
}</p>

<p>start() {</p>

<pre><code>[ -x $nginx ] || exit 5
[ -f $NGINX_CONF_FILE ] || exit 6
make_dirs
echo -n $"Starting $prog: "
daemon $nginx -c $NGINX_CONF_FILE
retval=$?
echo
[ $retval -eq 0 ] &amp;&amp; touch $lockfile
return $retval
</code></pre>

<p>}</p>

<p>stop() {</p>

<pre><code>echo -n $"Stopping $prog: "
killproc $prog -QUIT
retval=$?
echo
[ $retval -eq 0 ] &amp;&amp; rm -f $lockfile
return $retval
</code></pre>

<p>}</p>

<p>restart() {</p>

<pre><code>configtest || return $?
stop
sleep 1
start
</code></pre>

<p>}</p>

<p>reload() {</p>

<pre><code>configtest || return $?
echo -n $"Reloading $prog: "
killproc $nginx -HUP
RETVAL=$?
echo
</code></pre>

<p>}</p>

<p>force_reload() {</p>

<pre><code>restart
</code></pre>

<p>}</p>

<p>configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}</p>

<p>rh_status() {</p>

<pre><code>status $prog
</code></pre>

<p>}</p>

<p>rh_status_q() {</p>

<pre><code>rh_status &gt;/dev/null 2&gt;&amp;1
</code></pre>

<p>}</p>

<p>case &ldquo;$1&rdquo; in</p>

<pre><code>start)
    rh_status_q &amp;&amp; exit 0
    $1
    ;;
stop)
    rh_status_q || exit 0
    $1
    ;;
restart|configtest)
    $1
    ;;
reload)
    rh_status_q || exit 7
    $1
    ;;
force-reload)
    force_reload
    ;;
status)
    rh_status
    ;;
condrestart|try-restart)
    rh_status_q || exit 0
        ;;
*)
    echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
    exit 2
</code></pre>

<p>esac
```</p>

<p>然后,需要赋予脚本可执行权限:</p>

<p><code>bash
chmod 755 /etc/init.d/nginx
chkconfig --add nginx
/etc/init.d/nginx start
</code></p>

<p>到此,nginx+php+mysql已经部署完毕.下面是配置wordpress了.</p>

<h2>wordpress</h2>

<p><code>bash
cd $TEMP_DIR_PACKAGES
wget http://wordpress.org/latest.zip
unzip latest.zip
mv wordpress $TEMP_DIR_WEBSERVERS/www/
</code></p>

<p>剩下的是添加wordpress的nginx配置文件:<code>vim $TEMP_DIR_WEBSERVERS/www/nginx/conf/global/wordpress.conf</code></p>

<pre>
# WordPress single blog rules.
# Designed to be included in any server {} block.

# This order might seem weird - this is attempted to match last if rules below fail.
# http://wiki.nginx.org/HttpCoreModule
location / {
  try_files $uri $uri/ /index.php?$args;
}

# Add trailing slash to */wp-admin requests.
rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# Directives to send expires headers and turn off 404 error logging.
location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
       access_log off; log_not_found off; expires max;
}

# Uncomment one of the lines below for the appropriate caching plugin (if used).
#include global/wordpress-wp-super-cache.conf;
#include global/wordpress-w3-total-cache.conf;
</pre>


<p>接着是另外一个配置文件:<code>vim $TEMP_DIR_WEBSERVERS/www/nginx/conf/vhost/wordpress.conf</code></p>

<pre>
server {
    listen       80;
    server_name  blog.bbkanba.com;
    charset utf-8;
    index index.html index.php;
    root  /data/webservers/www/wordpress/;
    access_log  /data/webservers/nginx/logs/wordpress.log  access;

    include   global/restrictions.conf;
    include   global/php.conf;  
    include   global/wordpress.conf;
}
</pre>


<p>接着重新加载一下nginx的配置文件</p>

<p><code>bash
/etc/init.d/nginx reload
</code></p>

<p>你就可以访问自己上面配置的blog地址, <code>http://blog.bbkanba.com</code>, 进行著名的5分钟安装了.<br/>
如果你需要在nginx上使用更高级的cache规则,对wordpress进行优化的话,建议查看这里:</p>

<p><a href="http://codex.wordpress.org/Nginx">http://codex.wordpress.org/Nginx</a></p>
]]></content>
  </entry>
  
</feed>
