<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | 末日前几天]]></title>
  <link href="http://leolovenet.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://leolovenet.com/"/>
  <updated>2015-09-05T15:31:52+08:00</updated>
  <id>http://leolovenet.com/</id>
  <author>
    <name><![CDATA[leolovenet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置git使用proxy]]></title>
    <link href="http://leolovenet.com/blog/2014/05/28/git-and-proxy/"/>
    <updated>2014-05-28T09:50:17+08:00</updated>
    <id>http://leolovenet.com/blog/2014/05/28/git-and-proxy</id>
    <content type="html"><![CDATA[<p>Git 目前支持的三种协议  <code>git://</code> <code>ssh://</code>  <code>http://</code> 和 <code>https://</code></p>

<p>其代理配置各不相同.<br/>
  (1) core.gitproxy 用于 <code>git://</code> 协议<br/>
  (2) http.proxy 用于 <code>http://</code> 协议<br/>
  (3) <code>ssh://</code> 协议的代理需要配置 ssh 的 ProxyCommand 参数</p>

<h2>(一) 针对GIT 协议(git://)配置代理</h2>

<p>git 协议配置代理可以有两种方式,但是都是需要安装软件:  <code>socat</code><br/>
(1) Debian/Ubuntu just <code>sudo apt-get install socat</code><br/>
(2) CentOS use yum install  epel source  <code>yum -y install socat</code><br/>
(3) Mac OS: <code>brew install socat</code></p>

<h3>1. Git Through A HTTP Proxy</h3>

<p>让 git 走 HTTP 代理需要创建 <code>gitproxy.sh</code> 脚本,然后赋予可执行权限: 参考的<a href="http://www.emilsit.net/blog/archives/how-to-use-the-git-protocol-through-a-http-connect-proxy/">这个文章</a></p>

<pre><code class="bash">#!/bin/sh
# Use socat to proxy git through an HTTP CONNECT firewall.
# Useful if you are trying to clone git:// from inside a company.
# Requires that the proxy allows CONNECT to port 9418.
#
# Save this file as gitproxy somewhere in your path (e.g., ~/bin) and then run
# chmod +x gitproxy
# git config --global core.gitproxy gitproxy
#
# More details at http://tinyurl.com/8xvpny

# Configuration. Common proxy ports are 3128, 8123, 8000.
_proxy=proxy.yourcompany.com
_proxyport=3128
_proxyauth=username:password

exec socat STDIO PROXY:${_proxy}:$1:$2,proxyport=${_proxyport},proxyauth=${_proxyauth}
</code></pre>

<p>然后配置 git 使用这个代理, 在 <code>~/.gitconfig</code> 文件里写入:</p>

<pre><code class="bash">[core]
    gitproxy=gitproxy.sh for github.com
    #man git-config 查看 core.gitproxy 部分,关于 for * 的说明
</code></pre>

<h3>2. Git Through A SOCKS Proxy (or SSH Tunnel)</h3>

<p><a href="http://www.aireadfun.com/blog/2013/08/27/using-git-through-a-socks-proxy-or-ssh-tunnel/">参考的这篇文章</a></p>

<p>第一步: 使用 ssh开启一个socks 代理.</p>

<pre><code class="bash">ssh -nNT -D 8119 remote.host
#This command starts a SOCKS v4 proxy listening on localhost, port 8119.
</code></pre>

<p>第二步: 创建一个新的 <code>gitproxysocks.sh</code> 脚本,并赋予可执行权限.</p>

<pre><code class="bash">#!/bin/sh
#
# Use socat to proxy git through a SOCKS proxy.
# Useful if you are trying to clone git:// from inside a company.
#
# See http://tinyurl.com/8xvpny for Emil Sit's original HTTP proxy script.
# See http://tinyurl.com/45atuth for updated SOCKS version.## Configuration.
_proxy=localhost_proxyport=8119
execsocat STDIO SOCKS4:$_proxy:$1:$2,socksport=$_proxyport
</code></pre>

<p>第三步: 配置 git 使用这个脚本,可以像上面那样写入到配置文件 <code>~/.gitconfig</code> 中,也可以配置 <code>GIT_PROXY_COMMAND</code> 环境变量, git 获取数据时会检查这个环境变量.</p>

<pre><code class="bash">export GIT_PROXY_COMMAND=gitproxysocks.sh
</code></pre>

<h2>(二) 针对HTTP 协议(<a href="http://">http://</a>)配置代理</h2>

<p>配置 git 对 <code>http://</code> 协议开头的仓库使用 http 代理,可以直接编辑 <code>~/.gitconfig</code> 文件.</p>

<pre><code class="bash">[http]
    proxy = http://proxy.yourcompany.com:8080
</code></pre>

<p>或者,可以通过下面的脚本直接设置 <code>http_proxy</code>， <code>https_proxy</code> 与 <code>all_proxy</code> 环境变量。
把下面的脚本保存为 <code>http_proxy.sh</code> ，并在  <code>~/.bashrc</code> 或者 <code>~/.zshrc</code> 里加入 <code>source /path/to/http_proxy.sh</code>， 这样在想使用 proxy 时，运行 <code>http_proxy_enable</code> 命令就可以了，取消时运行 <code>http_proxy_disable</code></p>

<pre><code class="bash">#!/bin/sh
http_proxy_enable() {
    IP="http://username:password@proxy.yourcompany.com:8080"
    export http_proxy=$IP
    export https_proxy=$IP
    export all_proxy=$IP
}

http_proxy_disable() {
    unset http_proxy
    unset https_proxy
    unset all_proxy
}
</code></pre>

<h2>(三) 针对SSH 协议(ssh://)配置代理</h2>

<p>使用 ssh 的好处就是在 clone 数据,或者提交数据到 github.com 时,不用在输入 github 的帐号密码.<br/>
下面是 ssh 的设置,打开 <code>~/.ssh/config</code>
输入 :</p>

<pre><code class="bash">Host github*
    User git
    Hostname github.com
    Port 22
    Proxycommand ssh root@proxy.yourcompany.com nc %h %p
    IdentityFile  ~/.ssh/id_rsa
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Evernote笔记]]></title>
    <link href="http://leolovenet.com/blog/2013/10/07/my-sharing-notes/"/>
    <updated>2013-10-07T00:00:00+08:00</updated>
    <id>http://leolovenet.com/blog/2013/10/07/my-sharing-notes</id>
    <content type="html"><![CDATA[<p>最近发生了很多事情,刚刚从未来的丈母娘那里回来.</p>

<p>没有什么主要的技术文章,就发一些自己平时积累的Evernote的笔记.</p>

<blockquote><p>★★★ <a href="https://www.evernote.com/shard/s170/sh/d59d27d3-2341-4982-a78f-fe3d61b2d081/628d18b1f6c66b14a33cb89dc39266b2">虚拟机开发环境的搭建利器vagrant</a>
vagrant是一个创建和分发虚拟化开发环境的工具，使用ruby编写，基于Oracle的VirtualBox，它提供了一个可配置的、轻量级的、可重用的、便携的虚拟化开发环境.</p>

<p>★★★ <a href="https://www.evernote.com/shard/s170/sh/5ee87faa-0c73-46a6-9cd1-7117ee8971ea/4bbf353bae719e4ef65e2b57530732a1">Git的学习笔记</a></p>

<p>★★ <a href="https://www.evernote.com/shard/s170/sh/c6fa9447-727c-474a-b75d-4492b5764f08/cd5ee8ca706b35bbc969e5205964bbd3">Pow 相关笔记</a>
Pow是一个Rack Server for Mac OS X.</p>

<p>★★★ <a href="https://www.evernote.com/shard/s170/sh/d408e6c7-c997-4fc1-b4ae-97f20445e491/424b9f322830d7debaeb976ed870ff7d">读Postfix权威指南笔记</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
