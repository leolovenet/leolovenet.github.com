<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | 末日前几天]]></title>
  <link href="http://leolovenet.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://leolovenet.com/"/>
  <updated>2014-03-28T14:02:18+08:00</updated>
  <id>http://leolovenet.com/</id>
  <author>
    <name><![CDATA[leolovenet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[检测 Linux 服务器硬件资源的 Bash 脚本]]></title>
    <link href="http://leolovenet.com/blog/2014/03/28/a-linux-server-hardware-detection-resource-script/"/>
    <updated>2014-03-28T13:21:53+08:00</updated>
    <id>http://leolovenet.com/blog/2014/03/28/a-linux-server-hardware-detection-resource-script</id>
    <content type="html"><![CDATA[<p>最近公司要做机房的机器整理,把空闲的机器撤下来.</p>

<p>这样就需要列一个机器硬件配置的列表,就写了一个 bash 脚本来做检查,先for 循环自动 scp 到目标机器, 然后 for 循环自动 ssh 登录进所有的机器运行这个脚本.</p>

<p>输出的格式位 markdown, 可以很容易转换成 html 的 table .或者改一下脚本的输出格式为cvs,  到(这个网站)[<a href="http://www.tablesgenerator.com/html_tables">http://www.tablesgenerator.com/html_tables</a>]生成表格.</p>

<p>目前可以检查的资源有: 包含服务器的型号, U 数, Dell 序列号, 内存数, 最大内存数, 可以插的内存条数, 已经用的内存条数, 内存类型, 硬盘大小, CPU 信息.</p>

<p><div><script src='https://gist.github.com/9825167.js'></script>
<noscript><pre><code>#!/bin/bash

ISINSTALLED_D=$(rpm -qa |grep dmidecode)

if [ -z $ISINSTALLED_D ]; then
	yum -y install dmidecode
fi


export PATH=$HOME/bin:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin
NUM=$1
NUM=${NUM:=0}
ISSHOW_DES=$2
ISSHOW_DES=${ISSHOW_DES:=0}

U_NUM=$(dmidecode -t chassis |grep Height:|cut -d : -f 2)
U_NUM=${U_NUM// /}
PRODUCT=$(dmidecode -t system|grep Product|cut -d : -f 2|  sed -e &#39;s/^[ \t]*//&#39;)
SERIAL=$(dmidecode -t system|grep Serial|cut -d : -f 2|  sed -e &#39;s/^[ \t]*//&#39;)
HOSTNAME=$(hostname | cut -d . -f 1)
MEM=$(free -o|cut -c 1-20|grep -vi &quot;swap&quot;|grep Mem|cut -d : -f 2|sed -e &#39;s/^[ \t]*//&#39;)
MEM=$(echo &quot;$MEM 1000000&quot; | awk &#39;{printf &quot;%.1fGB&quot;, $1/$2}&#39;)
MEM_MAX_CAPACITY=$(dmidecode -t memory|grep &quot;Maximum Capacity&quot;|cut -d : -f 2)
MEM_MAX_CAPACITY=${MEM_MAX_CAPACITY// /}
MEM_NUM_OF_DEV=$(dmidecode -t memory|grep &quot;Number Of Devices&quot;|cut -d : -f 2)
MEM_NUM_OF_DEV=${MEM_NUM_OF_DEV// /}
MEM_NUM_OF_DEV_USED=$(dmidecode -t memory|grep &quot;Speed: Unknown&quot;|wc -l)
MEM_NUM_OF_DEV_USED=$(($MEM_NUM_OF_DEV - $MEM_NUM_OF_DEV_USED))
MEM_TYPE=$(dmidecode -t memory|grep &quot;Type: &quot;|tail -1|cut -d : -f 2)
MEM_TYPE=${MEM_TYPE// /}
DISK_SIZE=$(fdisk  -l  2&gt;/dev/null | grep GB |cut -d , -f 1|cut -d : -f 2|sed -e &#39;s/ //g&#39;)
DISK_SIZE=$(echo $DISK_SIZE|tr &#39; &#39; &#39;+&#39;)
CPU=$(cat /proc/cpuinfo |grep CPU|head -1|cut -d : -f 2 | sed -e &#39;s/^[ \t]*//&#39;)
CPU=${CPU// /}
CPU=${CPU//@/ }
CPU_NUM=$(cat /proc/cpuinfo |grep CPU|wc -l)
CPU_INFO=&quot;$CPU * $CPU_NUM&quot;

if [ &quot;${ISSHOW_DES}0&quot; != &quot;00&quot; ]; then
	echo &quot;|ID|服务器名|服务器型号|U数|DELL序列号|内存数|最大内存|总内存槽数|已经内存槽数|内存类型|硬盘大小信息|CPU 信息汇总|&quot;
	echo &quot;|--|------|--------|---|---------|-----|------|---------|----------|------|----------|----------|&quot;
fi
echo &quot;|$NUM|$HOSTNAME|$PRODUCT|$U_NUM|$SERIAL|$MEM|$MEM_MAX_CAPACITY|$MEM_NUM_OF_DEV|$MEM_NUM_OF_DEV_USED|$MEM_TYPE|$DISK_SIZE|$CPU_INFO|&quot;
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Ruby增强ping命令]]></title>
    <link href="http://leolovenet.com/blog/2013/10/11/enhanced-ping-command-function-with-ruby/"/>
    <updated>2013-10-11T00:00:00+08:00</updated>
    <id>http://leolovenet.com/blog/2013/10/11/enhanced-ping-command-function-with-ruby</id>
    <content type="html"><![CDATA[<p>故事的起因是,我在mac下一直用chrome,但是chrome有一个很不爽的地方,是在地址栏copy的域名,每次都自动的加上<code>http://</code>的字符串, 这样就没有办法直接粘贴到 Terminal, 用ping命令查看ping值. 这个事情真的弄的我很头疼.</p>

<p>所以就想办法关掉这个chrome的特性,google了半天也也没有找到,就放弃了.如果有人知道告诉我,十分感谢 :)</p>

<p>转而想可不可以增加 ping 的功能呢? 让ping可以支持有<code>http://</code>的域名.</p>

<p>正好,最近再看ruby的一些东西,感觉蛮方便的.就写了一个ruby脚本,可以自动的去掉http之类的协议头,然后传给ping命令执行.不就ok了嘛.</p>

<p>写出来之后,又不爽不能及时的知道ip的地理位置,所以呢,就又增加了调用纯真的ip数据库,顺便把ip的地理位置信息现实出来.</p>

<p>第一步,安装所需要的依赖库,qqwry.dat自己下载,然后改脚本里的路径信息.</p>

<p><code>
gem install escape qqwry
</code>
下面的代码我是另存为一个叫p的文件,放到了 <code>$home/bin/</code> 下面.
``` ruby</p>

<h1>!/usr/bin/env ruby</h1>

<h1>encoding : utf-8</h1>

<p>require &ldquo;escape&rdquo;
require &ldquo;uri&rdquo;
require &lsquo;qqwry&rsquo;
require &lsquo;resolv&rsquo;</p>

<p>unless ARGV.length == 1
  puts &ldquo;Usage: p <domain>\n&rdquo;
  exit
end</p>

<p>domain=ARGV[0].dup</p>

<p>if domain[0..3] != &ldquo;http&rdquo;
   domain.insert(0,&lsquo;<a href="http://">http://</a>&rsquo;)
end
host=URI.parse(&ldquo;#{domain}&rdquo;).host
ip=Resolv.getaddress host</p>

<p>db = QQWry::Database.new(&lsquo;/Users/yourname/Documents/vbox/ip/qqwry.dat&rsquo;)
r = db.query(ip)</p>

<p>puts &ldquo;&rdquo;
puts &ldquo;#{host}\t===>\t#{ip}\t===>\t#{r.country} #{r.area}&rdquo;
puts &ldquo;&rdquo;
exec &ldquo;ping #{host}&rdquo;
```</p>

<p>使用方法:
<code>
p http://www.google.com
</code>
脚本虽然很简单,但是用起来感觉很好.</p>
]]></content>
  </entry>
  
</feed>
