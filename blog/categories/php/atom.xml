<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | 末日前几天]]></title>
  <link href="http://leolovenet.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://leolovenet.com/"/>
  <updated>2015-01-23T14:58:52+08:00</updated>
  <id>http://leolovenet.com/</id>
  <author>
    <name><![CDATA[leolovenet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use Xdebug and LLDT to Debug Your PHP Code With Vagrant and PHPStrom]]></title>
    <link href="http://leolovenet.com/blog/2015/01/22/how-to-use-xdebug-and-lldt-to-debug-your-php-code-with-vagrant-and-phpstorm/"/>
    <updated>2015-01-22T17:53:58+08:00</updated>
    <id>http://leolovenet.com/blog/2015/01/22/how-to-use-xdebug-and-lldt-to-debug-your-php-code-with-vagrant-and-phpstorm</id>
    <content type="html"><![CDATA[<h2>主要用到的软件</h2>

<ul>
<li><a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a> PHP 开发IDE</li>
<li><a href="http://xdebug.org/">Xdebug</a> PHP debug 插件</li>
<li><a href="https://github.com/phacility/xhprof">Xhprof</a> Facebook 出品的 PHP 性能测量插件</li>
<li><a href="https://github.com/leolovenet/LLDT-chrome-plugin">LLDT-chrome-plugin</a> 自己写的一个 Chrome 浏览器插件，集成了<a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc?hl=en">xdebugHelper</a>，并添加了更多的选项。</li>
<li><a href="https://www.vagrantup.com/">Vagrant</a> 一款可以管理 VirtualBox 虚拟机的软件。</li>
<li><a href="https://www.virtualbox.org/">VirtualBox</a> 一款夸平台的虚拟机软件。</li>
<li><a href="http://nginx.org/">Nginx</a> web 服务器软件(运行在虚拟机中)</li>
<li><a href="http://php.net/">PHP-FPM</a> php运行管理(运行在虚拟机中)</li>
</ul>


<!--more-->


<h2>Vbox &amp; Vagrant 虚拟环境介绍</h2>

<h3>下载地址</h3>

<ul>
<li>Vbox最新版本下载地址 <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>Vagrant最新版本下载地址 <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a></li>
</ul>


<p>直接运行安装包进行安装。
安装包里同时包含了卸载脚本，如果想卸载的话，直接运行就可以了。</p>

<h3>相关目录</h3>

<p>在 Mac 平台下：<code>Vbox</code>的虚拟机默认保存路径为<code>~/VirtualBox VMs</code>，<code>Vagrant</code>用户的数据文件保存在<code>~/.vagrant.d</code>目录下面，删除这个目录将删除<code>vagrant</code>的所有<code>box</code>与<code>plugins</code>。</p>

<h3>什么是Box？</h3>

<p>box就相当于是一个环境，它一般是一个Vbox虚拟机的镜像，官方提供了一个基于Ubuntu的box。
给vagrant添加一个 Box 的命令, 打开 <code>Terminal</code></p>

<p>```bash
vagrant box add Ubuntu12.04 <a href="http://files.vagrantup.com/precise32.box">http://files.vagrantup.com/precise32.box</a></p>

<h1>Ubuntu12.04 的含义是虚拟机的名字.</h1>

<h1>上面的命令会下载 <a href="http://files.vagrantup.com/precise32.box">http://files.vagrantup.com/precise32.box</a> ,并添加到 ~/.vagrant.d/boxes/Ubuntu12.04 下</h1>

<h1>也可以直接将box下载下来，然后添加，需要执行：</h1>

<p>vagrant box add Ubuntu12.04 /the/path/for/your/precise32.box</p>

<h1>查看本机安装的 box 列表</h1>

<p>vagrant box list
```</p>

<h3>怎样使用 Vagrant 管理 Vbox 虚拟机</h3>

<ul>
<li><p><strong>初始化 Vagrant 环境</strong>，下面这个命令会在当前目录下面创建一个 Vagrant 使用的配置文件 Vagrantfile ，里面包含了 Vagrant 启动需要的配置。
<code>
vagrant init YOUR_BOX_NAME
</code></p></li>
<li><p><strong>开启 VirtualBox 虚拟机</strong>，下面这个命令，会创建一个新的 VirtualBox 的虚拟机。
<code>
vagrant up
</code></p></li>
<li><p><strong>关闭 VirtualBox 虚拟机</strong>
<code>
vagrant halt
</code></p></li>
<li><p><strong>挂起 VirtualBox 虚拟机</strong>，下次开机时间很短，非常快，但是占用更多的内存和硬盘空间。
<code>
vagrant suspend
</code></p></li>
<li><p><strong>恢复 VirtualBox 虚拟机</strong>， 将虚拟机恢复到初始状态.
<code>
vagrant destroy
</code></p></li>
<li><strong>登陆 VirtualBox 虚拟机</strong>
<code>
vagrant ssh
</code></li>
</ul>


<p>自己从官网下载一个 box，安装上后，我们开始讲正题。</p>

<h2>启动软件环境</h2>

<p>进入到你 Web 项目的根目录，手工创建<code>Vagrantfile</code>配置文件，或者也可以使用<code>vagrant ini</code>创建后再手工修改，添加了一个用来跟虚拟机通信的独立的 IP。</p>

<p>下面是 Vagrantfile 的内容：
```ruby</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<h1>Vagrantfile API/syntax version. Don&rsquo;t touch unless you know what you&rsquo;re doing!</h1>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|</p>

<pre><code>config.vm.box = "edengdev-CentOS6.4x86_64"
config.vm.network "private_network", ip: "192.168.168.168"
config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", "1024"]
end
</code></pre>

<p>end
```</p>

<p>然后运行下面的命令，开启，并登陆进虚拟机里
```bash
vagrant up
vagrant ssh</p>

<h1>创建待会需要用的目录</h1>

<p>mkdir -p /var/log/php/xdebug/trace_output
mkdir -p /var/log/php/xdebug/profiler_output
mkdir -p /var/log/php/xhprof/xhprof_data
mkdir -p /etc/php/include</p>

<h1>修噶 hosts 文件，这样可以直接访问网址 「<a href="http://me.dev%E3%80%8D%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%9C%AC%E6%9C%BA%E5%BC%80%E5%8F%91%E4%BA%86%E3%80%82">http://me.dev%E3%80%8D%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%9C%AC%E6%9C%BA%E5%BC%80%E5%8F%91%E4%BA%86%E3%80%82</a></h1>

<p>sudo  echo &ldquo;me.dev 192.168.168.168&rdquo;  >> /etc/hosts
```</p>

<p>在虚拟机中安装好<code>Nginx</code>，<code>PHP-FPM</code>，<code>Xdebug</code>，<code>Xhprof</code>，这个过程就不过多的介绍了。</p>

<p>下面是我的 Xdebug 配置文件样例：
```ini
;;;;;;;;;;;;;;;;;;;;;;
; xdebug             ;
;;;;;;;;;;;;;;;;;;;;;;
[xdebug]
; 这里要求必须是绝对路径，不能是相对路径 see:
; <a href="http://stackoverflow.com/questions/1758014/whats-the-difference-between-extension-and-zend-extension-in-php-ini">http://stackoverflow.com/questions/1758014/whats-the-difference-between-extension-and-zend-extension-in-php-ini</a>
zend_extension=&ldquo;/usr/local/php/lib/php/extensions/no-debug-non-zts-20090626/xdebug.so&rdquo;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;     All API Docs At <a href="http://xdebug.org/docs/all_settings">http://xdebug.org/docs/all_settings</a>     ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</p>

<p>xdebug.overload_var_dump=On
; 强制指定显示错误，不管php.ini的设置
xdebug.force_display_errors=On
xdebug.force_error_reporting=On</p>

<p>; If this setting is 1, then stacktraces will be shown by default on an error event.
; You can disable showing stacktraces from your code with xdebug_disable().
; As this is one of the basic functions of Xdebug, it is advisable to leave this setting set to 1.
xdebug.default_enable=1</p>

<p>; don&rsquo;t use coverage function
xdebug.coverage_enable=Off</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                 Stack Traces                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;       <a href="http://xdebug.org/docs/stack_trace">http://xdebug.org/docs/stack_trace</a>           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
xdebug.collect_params=3
xdebug.collect_return=Off
; xdebug.collect_vars=On
; xdebug.dump_globals=On
; xdebug.dump.SERVER=&ldquo;REQUEST_URI&rdquo;</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            Function Trace                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     <a href="http://xdebug.org/docs/execution_trace">http://xdebug.org/docs/execution_trace</a>         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
xdebug.auto_trace=Off
xdebug.collect_includes=On
;显示内存信息,在trace的时候
xdebug.show_mem_delta=On
xdebug.trace_enable_trigger=On
xdebug.trace_output_dir=&ldquo;/var/log/php/xdebug/trace_output&rdquo;
;指定trace输出文件的格式, 0 是文本文件，1 计算机可读格式， 2 html格式
xdebug.trace_format=0
;When set to &lsquo;1&rsquo; the trace files will be appended to, instead of being overwritten in subsequent requests.
xdebug.trace_options=0
;指定trace输出文件名的格式, %R Meaning $_SERVER[&lsquo;REQUEST_URI&rsquo;]
xdebug.trace_output_name=trace.%R</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            Profiling Script                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;        <a href="http://xdebug.org/docs/profiler">http://xdebug.org/docs/profiler</a>             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
xdebug.profiler_enable=Off
xdebug.profiler_output_dir=&ldquo;/var/log/php/xdebug/profiler_output&rdquo;
xdebug.profiler_enable_trigger=On
;profiler文件是追加，还是重写
xdebug.profiler_append=Off
xdebug.profiler_output_name=%R.cachegrind</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;              Remote Debugging                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;        <a href="http://xdebug.org/docs/remote">http://xdebug.org/docs/remote</a>               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
xdebug.remote_handler=dbgp
xdebug.remote_autostart=Off
xdebug.remote_enable=1
xdebug.remote_host=192.168.192.1
xdebug.remote_port=9000
xdebug.remote_mode=req
;xdebug.remote_log=&ldquo;&rdquo;
```</p>

<p>下面是我的 Xhprof 的配置样例：</p>

<p>首先，将<code>Xhprof</code>自带的<code>xhprof_html</code>,<code>xhprof_lib</code>目录放入到<code>/var/log/php/xhprof/</code> 下。
```ini
;;;;;;;;;;; add the following configuration to php.ini ;;;;;;;;;;;;;;;;;;;;;;;;;;;
auto_prepend_file = &ldquo;/etc/php/include/auto_prepend.php&rdquo;
auto_append_file  = &ldquo;/etc/php/include/auto_append.php&rdquo;
; Xhprof Module
[xhprof]
xhprof.output_dir = /var/log/php/xhprof/xhprof_data</p>

<p>;;;;;;;;;;; add the following configuration to php-fpm.conf ;;;;;;;;;;;;;;;;;;;;;
;#### for xhprof
php_admin_value[extension] = xhprof.so
env[XHPROF_ROOT_PATH] = /var/log/php/xhprof</p>

<h1>采样百分比，多少次访问后性能采样一次</h1>

<p>env[XHPROF_SAMPLING_PERCENTAGE] = 3000
```</p>

<p>下面是 <code>/etc/php/include/auto_prepend.php</code> 的内容：
```php
if(isset($_SERVER[&lsquo;XHPROF_ROOT_PATH&rsquo;])){</p>

<pre><code>// start profiling
// options: xhprof_enable(  XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY + XHPROF_FLAGS_NO_BUILTINS );
$xhprof_on = false;
//if ($_SERVER['REQUEST_METHOD'] == 'POST'){
    if ( function_exists('xhprof_enable')  &amp;&amp; ( ( mt_rand(1, $_SERVER['XHPROF_SAMPLING_PERCENTAGE']) == 1 ) || isset( $_REQUEST['XHPROF_PROFILE'] ) ) ) {
        xhprof_enable(XHPROF_FLAGS_NO_BUILTINS + XHPROF_FLAGS_MEMORY);
        $xhprof_on = true;
    }
//}
</code></pre>

<p>}
```</p>

<p>下面是 <code>/etc/php/include/auto_append.php</code> 的内容：
```php
if ($xhprof_on){</p>

<pre><code>$xhprof_data = xhprof_disable();
include_once $_SERVER['XHPROF_ROOT_PATH'] . "/xhprof_lib/utils/xhprof_lib.php";
include_once $_SERVER['XHPROF_ROOT_PATH'] . "/xhprof_lib/utils/xhprof_runs.php";
$xhprof_runs = new XHProfRuns_Default();
$xhporf_script_name= str_replace('.','^', substr(str_replace('/', '_', $_SERVER['SCRIPT_FILENAME']),1) );
$run_id = $xhprof_runs-&gt;save_run( $xhprof_data, $xhporf_script_name , date('YmdHis').substr((string)microtime(), 2, 8));
</code></pre>

<p>}
```</p>

<h2>设置 PhpStorm</h2>

<p>我使用的 IDE 软件为  <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>，要配合使用 Vagrant 的话，还需要特殊配置一下。</p>

<h3>1.Create New Project</h3>

<p><img src="/downloads/images/phpstorm-1.jpg" alt="phpstorm-1" /></p>

<h3>2. Edit Configrations&hellip;</h3>

<p>Run > Edit Configrations&hellip; > Defaults > PHP Remote Debug > Servers
<img src="/downloads/images/phpstorm-4.jpg" alt="phpstorm-4" /></p>

<p>因为使用 Vagrant 的缘故，所以调试 PHP 代码的时候，需要配置目录映射。
```</p>

<h1>your/sites/path            &mdash;>  /vagrant</h1>

<p>```
<img src="/downloads/images/phpstorm-5.jpg" alt="phpstorm-5" /></p>

<h3>3.Debug</h3>

<p>勾选， Run > &ldquo;Break at first line in PHP scripts&rdquo; 后，点击 “Debug &lsquo;xxxxx&rsquo;
<img src="/downloads/images/phpstorm-6.jpg" alt="phpstorm-6" />
<img src="/downloads/images/phpstorm-7.jpg" alt="phpstorm-7" /></p>

<h2>Chrome 浏览器的插件 LLDT</h2>

<p>chrome 安装 LLDT 后，打开你开发的网址<a href="http://me.dev,">http://me.dev,</a> 刷新一下。会看到地址栏的LLDT图标，点击一下，或者按快捷键<code>Ctrl+Shift+X</code>，mac用户为<code>command+Shift+x</code>，调出菜单弹窗。
<img src="/downloads/images/phpstorm-8.png" alt="phpstorm-8" /></p>

<h3>Enable Xdebug debug</h3>

<p>点击<code>Enable Xdebug debug</code>，或者按快捷键 <code>D</code>, 刷新网页。 返回PhpStorm程序，应该已经开启debug了。
<img src="/downloads/images/phpstorm-9.jpg" alt="phpstorm-9" /></p>

<h3>Enable Xdebug Profile</h3>

<p>Xdebug Profile 功能可以对HTTP请求页面对应的脚本性能进行分析，并将分析数据保存到文件中。</p>

<ul>
<li>Mac 用户可以安装 qcachegrind ,来观看Profilling保存的数据文件，<code>brew install qcachegrind</code>。</li>
<li>Windows 用户可以安装 WinCacheGrind, 或者 KCacheGrind, 来观看。</li>
</ul>


<p>找到Chrome浏览器地址栏的LLDT图标，点击一下，或者按快捷键<code>Ctrl+Shift+X</code>，mac用户为<code>command+Shift+x</code>，调出菜单弹窗，点击<code>Enable Xdebug Profile</code>，或者按快捷键 <code>P</code>, 刷新网页就可以了。</p>

<p>Profile 的数据文件存储在了，<code>/var/log/php/xdebug/profiler_output</code> 目录中。
mac下查看分析结果，安装完qcachegrind，将数据文件 copy 出来，打开 <code>Terminal</code>，运行<code>qcachegrind xxxx.cachegrind</code>  命令，查看相应地xxxx数据文件。</p>

<p>例如：
<img src="/downloads/images/phpstorm-10.jpg" alt="phpstorm-10" /></p>

<h3>Enable Xdebug Trace</h3>

<p>Xdebug Trace 功能可以对HTTP请求页面对应的脚本执行过程的函数调用进行记录，并将记录结果保存到文件中。</p>

<p>找到 Chrome 浏览器地址栏的 LLDT 图标，点击一下，或者按快捷键<code>Ctrl+Shift+X</code>，mac用户为<code>command+Shift+x</code>，调出菜单弹窗，点击<code>Enable Xdebug Trace</code>，或者按快捷键 <code>T</code>, 刷新网页就可以了。</p>

<p>保存的数据文件存储在了，<code>/var/log/php/xdebug/trace_output</code> 目录中。
直接可以用你自己喜欢的文本编辑器查看分析结果。</p>

<h3>Enable Xhprof</h3>

<p>Xhprof 为 Facebook 出品的分层PHP性能分析工具。 可以对 PHP脚本的执行进行性能分析。并将记录结果保存到文件中。</p>

<p>找到 Chrome 浏览器地址栏的 LLDT 图标，点击一下，或者按快捷键<code>Ctrl+Shift+X</code>，mac用户为<code>command+Shift+x</code>，调出菜单弹窗，点击<code>Enable Xhprof</code>，或者按快捷键 <code>X</code>, 刷新网页就可以了。</p>

<p>保存的数据文件存储在了，<code>/var/log/php/xhprof/xhprof_data</code> 目录中。
xhprof 的分析结果怎么查看, 自己查看官网的介绍吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的机器资产管理,machineBill]]></title>
    <link href="http://leolovenet.com/blog/2013/07/11/machinebill/"/>
    <updated>2013-07-11T00:00:00+08:00</updated>
    <id>http://leolovenet.com/blog/2013/07/11/machinebill</id>
    <content type="html"><![CDATA[<p>原来的公司因为有多台机器资产管理的需求,特意写了一个台账系统,用的是jQuery EasyUI + PHP + Mysql ,制作的极其简单,主要是用jQuery EasyUI的练手之作.</p>

<p>现在看来是没有用了.公布出来方便以后自己用的着的时候查询.</p>

<p>已经发到了<a href="https://github.com/leolovenet/machineBill">github</a>上.</p>

<p>并安装到了BBKanba上了一个Demo.<br/>
<a href="http://bill.bbkanba.com" target="_blank"><a href="http://bill.bbkanba.com">http://bill.bbkanba.com</a></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用php+Bootstrap+QQwrt.dat展示你的IP和位置信息]]></title>
    <link href="http://leolovenet.com/blog/2012/12/22/ShowYourIP/"/>
    <updated>2012-12-22T00:00:00+08:00</updated>
    <id>http://leolovenet.com/blog/2012/12/22/ShowYourIP</id>
    <content type="html"><![CDATA[<p>ShowYourIP利用php+Bootstrap+QQwrt.dat展示用户IP和位置信息，并可以利用ajax查询任意ip地址的物理位置。 <a href="https://github.com/leolovenet/ShowYourIP">GitHub</a>.</p>

<p><img src="https://raw.github.com/leolovenet/ShowYourIP/master/showYourIP.png" title="showYourIP" alt="showYourIP.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手工编译安装Mysql+Nginx+PHP+CentOS+wordpress]]></title>
    <link href="http://leolovenet.com/blog/2012/12/19/mysql-nginx-php-linux-wordpress/"/>
    <updated>2012-12-19T00:00:00+08:00</updated>
    <id>http://leolovenet.com/blog/2012/12/19/mysql-nginx-php-linux-wordpress</id>
    <content type="html"><![CDATA[<p>首先,关于这个组合非常的出名,(早先是apache用做web服务,后被nginx篡位), 他们的好处就不细讲了,具体的可以看一下<a href="http://blog.s135.com/nginx_php_v6/" title="张宴" target="_blank">张宴同学的Nginx 0.8.x + PHP 5.2.13（FastCGI）搭建胜过Apache十倍的Web服务器（第6版）[原创]</a>,那篇文章写的很详细,不过有段时间没有更新了,有些软件有些老,而且我的搭建环境是在CentOS(x86_64)位下,有一些不同的地方.<br/>
OK, Next.
安装步骤为先安装Mysql, 然后PHP, 然后Nginx, 最后讲一下nginx下配置worldpress时怎样修改配置文件.<br/>
顺便说一下,本文中提到的所有开源软件截止到<span style="color:red;">2012年12月21日</span>,全部为最新<strong>稳定版</strong>.</p>

<p>本文提及的所有的软件全部下载到了<code>/data/packages/</code>目录下.
本文提及的所有的软件全部安装到了<code>/data/webservers/</code>目录下.
(如果你的安装环境跟本文有出处的话,只需要在下面的初始环境命令中更换变量<code>{TEMP_DIR_PACKAGES|TEMP_DIR_WEBSERVERS}</code>即可)
本文所有安装的新服务都会利用<code>chkconfig</code>添加到系统启动服务里,确保机器重启后服务能够自动启动.<br/>
本文所有安装好的新服务都可以利用标准的命令格式<code>/etc/init.d/XXX {start|stop|restart|reload}</code>进行手工的<code>{start|stop|restart|reload}</code><br/>
Ready Go.<br/>
初步准备,利用CentOS系统自带的yum命令安装、升级所需的程序库,建立基本目录,构建初始环境.</p>

<!--more-->


<p><code>bash
mkdir -p /data/packages
mkdir -p /data/webservers
export TEMP_DIR_PACKAGES=/data/packages
export TEMP_DIR_WEBSERVERS=/data/webservers
yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel openldap-clients openldap-servers cmake
</code></p>

<p>敲入回车之后,让yum飞一会&hellip; &hellip;</p>

<h2>Mysql</h2>

<p>我们第一个要安装mysql,全部安装命令如下,注意我把下载的压缩包的详细版本换成了<code>*</code>,这样有助与解决小版本的不同,可能你下载的mysql会升级小版本号:</p>

<p>``` bash
cd $TEMP_DIR_PACKAGES
wget <a href="http://dev.mysql.com/downloads/mirror.php?id=411115">http://dev.mysql.com/downloads/mirror.php?id=411115</a>
tar -zxf mysql-5.5.<em>.tar.gz
cd mysql-5.5.</em>
groupadd mysql
useradd -r -g mysql mysql
cmake -D  CMAKE_INSTALL_PREFIX:PATH=$TEMP_DIR_WEBSERVERS/mysql/  -D MYSQL_DATADIR:PATH=$TEMP_DIR_WEBSERVERS/mysql/data/ .
make
make install</p>

<p>echo &ldquo;$TEMP_DIR_WEBSERVERS/mysql/lib/&rdquo; >> /etc/ld.so.conf.d/webservers.conf
/sbin/ldconfig</p>

<p>cd $TEMP_DIR_WEBSERVERS/mysql/
chown -R mysql .
chgrp -R mysql .
scripts/mysql_install_db &mdash;user=mysql
chown -R root .
chown -R mysql data
cp support-files/my-medium.cnf /etc/my.cnf
cp support-files/mysql.server /etc/init.d/mysql.server
chkconfig &mdash;add mysql.server
chkconfig &mdash;list mysql.server
/etc/init.d/mysql.server start
```</p>

<p>上面最后一行命令就是用我说的标准启动服务格式,开启mysql服务.当然你也可以用<code>service xxx start</code>这种格式.<br/>
下面的的命令是可选的,你也可以不这样做,但是还是建议看一下,毕竟没有坏处只有好处.<br/>
<strong>Next command is optional</strong></p>

<p>``` bash</p>

<h1>运行脚本,给mysql的root用户设置密码,删除测试的用户和测试数据库</h1>

<p>$TEMP_DIR_WEBSERVERS/mysql/bin/mysql_secure_installation</p>

<h1>修改mysql配置文件,让它避免中文乱码问题</h1>

<p>vim /etc/my.cnf</p>

<h1>在[client]后面添加</h1>

<p>default-character-set = utf8</p>

<h1>在[mysqld]后面添加</h1>

<p>character-set-server = utf8</p>

<h1>用你刚刚设置的root密码登陆mysql,为mysql创建一个新的用户</h1>

<p>$TEMP_DIR_WEBSERVERS/mysql/bin/mysql -uroot -p
GRANT ALL PRIVILEGES ON <em>.</em> TO &lsquo;leolovenet&rsquo;@&lsquo;%&rsquo; IDENTIFIED BY &lsquo;123&rsquo;;
```</p>

<h2>安装php的依赖软件</h2>

<p>``` bash
cd $TEMP_DIR_PACKAGES</p>

<p>wget <a href="http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz">http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</a>
tar zxf libiconv-1.14.tar.gz
cd libiconv-1.14/
./configure
make
make install
cd ../</p>

<p>wget <a href="http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download">http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download</a>
tar zxf libmcrypt-2.5.8.tar.gz
cd libmcrypt-2.5.8/
./configure
make
make install
echo &ldquo;/usr/local/lib/&rdquo; >> /etc/ld.so.conf.d/webservers.conf
/sbin/ldconfig
cd libltdl/
./configure &mdash;enable-ltdl-install
make
make install
cd ../../</p>

<p>wget <a href="http://sourceforge.net/projects/mhash/files/latest/download">http://sourceforge.net/projects/mhash/files/latest/download</a>
tar zxvf mhash-<em>.tar.gz
cd mhash-</em>/
./configure
make
make install
cd ../</p>

<p>wget <a href="http://sourceforge.net/projects/mcrypt/files/latest/download">http://sourceforge.net/projects/mcrypt/files/latest/download</a>
tar zxvf mcrypt-<em>.tar.gz
cd mcrypt-</em>/
/sbin/ldconfig
./configure
make
make install
cd ../
```</p>

<h2>安装php</h2>

<p>因为我的机器是x86_64位环境,所以在配置php的时候加入了<code>--with-libdir=lib64</code>选项.<br/>
此时,php会检查mysql的<code>$TEMP_DIR_WEBSERVERS/mysql/lib64</code>目录,而不是<code>$TEMP_DIR_WEBSERVERS/mysql/lib</code>目录,所以我们加入了一个软链接</p>

<p>``` bash
ln -s $TEMP_DIR_WEBSERVERS/mysql/lib $TEMP_DIR_WEBSERVERS/mysql/lib64</p>

<p>cd $TEMP_DIR_PACKAGES
wget <a href="http://cn2.php.net/get/php-5.3.20.tar.gz/from/this/mirror">http://cn2.php.net/get/php-5.3.20.tar.gz/from/this/mirror</a>
tar zxf php-5.3.20.tar.gz
cd php-5.3.20
./configure &mdash;prefix=$TEMP_DIR_WEBSERVERS/php &mdash;with-config-file-path=$TEMP_DIR_WEBSERVERS/php/etc &mdash;with-mysql=$TEMP_DIR_WEBSERVERS/mysql &mdash;with-mysqli=$TEMP_DIR_WEBSERVERS/mysql/bin/mysql_config &mdash;with-iconv-dir=/usr/local &mdash;with-freetype-dir &mdash;with-jpeg-dir &mdash;with-png-dir &mdash;with-zlib &mdash;with-libxml-dir=/usr &mdash;enable-xml &mdash;disable-rpath  &mdash;enable-safe-mode &mdash;enable-bcmath &mdash;enable-shmop &mdash;enable-sysvsem &mdash;enable-inline-optimization &mdash;with-curl &mdash;with-curlwrappers &mdash;enable-mbregex  &mdash;enable-fpm  &mdash;enable-mbstring &mdash;with-mcrypt &mdash;with-gd &mdash;enable-gd-native-ttf &mdash;with-openssl &mdash;with-mhash &mdash;enable-pcntl &mdash;enable-sockets &mdash;with-ldap &mdash;with-ldap-sasl &mdash;with-xmlrpc &mdash;enable-zip &mdash;enable-soap &mdash;enable-sqlite-utf8 &mdash;with-libdir=lib64
make ZEND_EXTRA_LIBS=&lsquo;-liconv&rsquo;
make install
cp $TEMP_DIR_PACKAGES/php-5.3.20/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
chmod 755 /etc/init.d/php-fpm
chkconfig &mdash;add php-fpm
cp $TEMP_DIR_PACKAGES/php-5.3.20/php.ini-production $TEMP_DIR_WEBSERVERS/php/etc/php.ini
cp $TEMP_DIR_WEBSERVERS/php/etc/php-fpm.conf.default $TEMP_DIR_WEBSERVERS/php/etc/php-fpm.conf</p>

<h1>手工修改php.ini文件,vim $TEMP_DIR_WEBSERVERS/php/etc/php.ini</h1>

<h1>修改cgi.fix_pathinfo=0,防止Nginx文件类型错误解析漏洞.</h1>

<h1>手工修改vim $TEMP_DIR_WEBSERVERS/php/etc/php-fpm.ini文件,根据自己机器的内存大小,修改php-fpm开启的运行进程数</h1>

<h1>pm.max_spare_servers = 5</h1>

<p>/etc/init.d/php-fpm start
```</p>

<h2>Nginx</h2>

<p>``` bash
wget <a href="http://sourceforge.net/projects/pcre/files/latest/download">http://sourceforge.net/projects/pcre/files/latest/download</a>
tar zxf pcre-<em>
cd pcre-</em>/
./configure
make &amp;&amp; make install
cd ../</p>

<p>wget <a href="http://nginx.org/download/nginx-1.2.6.tar.gz">http://nginx.org/download/nginx-1.2.6.tar.gz</a>
./configure &mdash;user=www &mdash;group=www &mdash;prefix=$TEMP_DIR_WEBSERVERS/nginx &mdash;with-http_stub_status_module &mdash;with-http_ssl_module<br/>
make &amp;&amp; make install
cd $TEMP_DIR_WEBSERVERS/nginx/conf
mkdir global
mkdir vhost
mkdir -p $TEMP_DIR_WEBSERVERS/www/other/
mv nginx.conf nginx.conf.org
```</p>

<p>手工编辑 <code>vim $TEMP_DIR_WEBSERVERS/nginx/conf/nginx.conf</code>,输入下面的内容.<br/>
注意下面内容的路径<code>/data/webservers</code>,如果你的环境不同,请手工更换.</p>

<pre>
user  www www;
#ususally equal to number of CPU's you have. run command "grep processor /proc/cpuinfo | wc -l" to find it
worker_processes  1;
error_log  /data/webservers/nginx/logs/nginx_error.log  crit;
pid        /data/webservers/nginx/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process. 
#worker_rlimit_nofile 65535;

events {
    #use epoll;
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
      
    #rewrite_log on;
    sendfile on;
    #tcp_nopush     on;
    keepalive_timeout 3;
    #tcp_nodelay on;
    
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
  
    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    #php max upload limit cannot be larger than this       
    client_max_body_size 13m;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
      
    index  index.php index.html index.htm;
  # Upstream to abstract backend connection(s) for PHP.
    upstream php {
                #this should match value of "listen" directive in php-fpm pool
                #server unix:/tmp/php-fpm.sock;
                server 127.0.0.1:9000;
      }

    log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
              '$status $body_bytes_sent "$http_referer" '
              '"$http_user_agent" $http_x_forwarded_for';

    server  {
        listen       80;
        server_name  bbkanba.com  www.bbkanba.com;
        charset utf-8;
      root      /data/webservers/www/other/;
      access_log  /data/webservers/nginx/logs/access.log  access;
    
    include   global/restrictions.conf;
    include   global/php.conf;
    } 
  include vhost/*.conf;
}
</pre>


<p>进入到<code>cd $TEMP_DIR_WEBSERVERS/nginx/conf/global/</code>,创建php.conf,输入下面的内容:</p>

<pre>
# Pass all .php files onto a php-fpm/php-fcgi server.
location ~ \.php$ {
    # Zero-day exploit defense.
    # http://forum.nginx.org/read.php?2,88845,page=3
    # Won't work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.
    # Comment the 'try_files' line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won't get hacked.
    try_files $uri =404;

    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

    include fastcgi_params;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #fastcgi_intercept_errors on;
    fastcgi_pass php;
}
</pre>


<p>继续创建restrictions.conf,输入下面的内容:</p>

<pre>
# Global restrictions configuration file.
# Designed to be included in any server {} block.

location = /favicon.ico {
  log_not_found off;
  access_log off;
}

location = /robots.txt {
  allow all;
  log_not_found off;
  access_log off;
}

# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~ /\. {
  deny all;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
  deny all;
}
</pre>


<p>配置文件创建完毕,为了遵循我们之前说的,可以用<code>/etc/init.d/XXX {start|stop|restart|reload}</code>这种格式进行服务的控制,需要手工创建脚本,<br/>
<code>vim /etc/init.d/nginx</code>,输入下面内容:<br/>
注意下面内容的路径<code>/data/webservers</code>,如果你的环境不同,请手工更换.</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<h1>nginx &ndash; this script starts and stops the nginx daemon</h1>

<p>#</p>

<h1>chkconfig:   &ndash; 85 15</h1>

<h1>Required-Start:    $remote_fs $network</h1>

<h1>Required-Stop:     $remote_fs $network</h1>

<h1>Default-Start:     2 3 4 5</h1>

<h1>Default-Stop:      0 1 6</h1>

<h1>description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</h1>

<h1>proxy and IMAP/POP3 proxy server</h1>

<h1>processname: nginx</h1>

<h1>config:      /data/webservers/nginx/conf/nginx.conf</h1>

<h1>pidfile:     /data/webservers/nginx/nginx.pid</h1>

<h1>Source function library.</h1>

<p>. /etc/rc.d/init.d/functions</p>

<h1>Source networking configuration.</h1>

<p>. /etc/sysconfig/network</p>

<h1>Check that networking is up.</h1>

<p>[ &ldquo;$NETWORKING&rdquo; = &ldquo;no&rdquo; ] &amp;&amp; exit 0</p>

<p>nginx=&ldquo;/data/webservers/nginx/sbin/nginx&rdquo;
prog=$(basename $nginx)</p>

<p>NGINX_CONF_FILE=&ldquo;/data/webservers/nginx/conf/nginx.conf&rdquo;</p>

<p>[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</p>

<p>lockfile=/var/lock/subsys/nginx</p>

<p>make_dirs() {
   # make required directories
   user=<code>$nginx -V 2&gt;&amp;1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -</code>
   if [ -z &ldquo;<code>grep $user /etc/passwd</code>&rdquo; ]; then</p>

<pre><code>   useradd -M -s /bin/nologin $user
</code></pre>

<p>   fi
   options=<code>$nginx -V 2&gt;&amp;1 | grep 'configure arguments:'</code>
   for opt in $options; do</p>

<pre><code>   if [ `echo $opt | grep '.*-temp-path'` ]; then
       value=`echo $opt | cut -d "=" -f 2`
       if [ ! -d "$value" ]; then
           # echo "creating" $value
           mkdir -p $value &amp;&amp; chown -R $user $value
       fi
   fi
</code></pre>

<p>   done
}</p>

<p>start() {</p>

<pre><code>[ -x $nginx ] || exit 5
[ -f $NGINX_CONF_FILE ] || exit 6
make_dirs
echo -n $"Starting $prog: "
daemon $nginx -c $NGINX_CONF_FILE
retval=$?
echo
[ $retval -eq 0 ] &amp;&amp; touch $lockfile
return $retval
</code></pre>

<p>}</p>

<p>stop() {</p>

<pre><code>echo -n $"Stopping $prog: "
killproc $prog -QUIT
retval=$?
echo
[ $retval -eq 0 ] &amp;&amp; rm -f $lockfile
return $retval
</code></pre>

<p>}</p>

<p>restart() {</p>

<pre><code>configtest || return $?
stop
sleep 1
start
</code></pre>

<p>}</p>

<p>reload() {</p>

<pre><code>configtest || return $?
echo -n $"Reloading $prog: "
killproc $nginx -HUP
RETVAL=$?
echo
</code></pre>

<p>}</p>

<p>force_reload() {</p>

<pre><code>restart
</code></pre>

<p>}</p>

<p>configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}</p>

<p>rh_status() {</p>

<pre><code>status $prog
</code></pre>

<p>}</p>

<p>rh_status_q() {</p>

<pre><code>rh_status &gt;/dev/null 2&gt;&amp;1
</code></pre>

<p>}</p>

<p>case &ldquo;$1&rdquo; in</p>

<pre><code>start)
    rh_status_q &amp;&amp; exit 0
    $1
    ;;
stop)
    rh_status_q || exit 0
    $1
    ;;
restart|configtest)
    $1
    ;;
reload)
    rh_status_q || exit 7
    $1
    ;;
force-reload)
    force_reload
    ;;
status)
    rh_status
    ;;
condrestart|try-restart)
    rh_status_q || exit 0
        ;;
*)
    echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
    exit 2
</code></pre>

<p>esac
```</p>

<p>然后,需要赋予脚本可执行权限:</p>

<p><code>bash
chmod 755 /etc/init.d/nginx
chkconfig --add nginx
/etc/init.d/nginx start
</code></p>

<p>到此,nginx+php+mysql已经部署完毕.下面是配置wordpress了.</p>

<h2>wordpress</h2>

<p><code>bash
cd $TEMP_DIR_PACKAGES
wget http://wordpress.org/latest.zip
unzip latest.zip
mv wordpress $TEMP_DIR_WEBSERVERS/www/
</code></p>

<p>剩下的是添加wordpress的nginx配置文件:<code>vim $TEMP_DIR_WEBSERVERS/www/nginx/conf/global/wordpress.conf</code></p>

<pre>
# WordPress single blog rules.
# Designed to be included in any server {} block.

# This order might seem weird - this is attempted to match last if rules below fail.
# http://wiki.nginx.org/HttpCoreModule
location / {
  try_files $uri $uri/ /index.php?$args;
}

# Add trailing slash to */wp-admin requests.
rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# Directives to send expires headers and turn off 404 error logging.
location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
       access_log off; log_not_found off; expires max;
}

# Uncomment one of the lines below for the appropriate caching plugin (if used).
#include global/wordpress-wp-super-cache.conf;
#include global/wordpress-w3-total-cache.conf;
</pre>


<p>接着是另外一个配置文件:<code>vim $TEMP_DIR_WEBSERVERS/www/nginx/conf/vhost/wordpress.conf</code></p>

<pre>
server {
    listen       80;
    server_name  blog.bbkanba.com;
    charset utf-8;
    index index.html index.php;
    root  /data/webservers/www/wordpress/;
    access_log  /data/webservers/nginx/logs/wordpress.log  access;

    include   global/restrictions.conf;
    include   global/php.conf;  
    include   global/wordpress.conf;
}
</pre>


<p>接着重新加载一下nginx的配置文件</p>

<p><code>bash
/etc/init.d/nginx reload
</code></p>

<p>你就可以访问自己上面配置的blog地址, <code>http://blog.bbkanba.com</code>, 进行著名的5分钟安装了.<br/>
如果你需要在nginx上使用更高级的cache规则,对wordpress进行优化的话,建议查看这里:</p>

<p><a href="http://codex.wordpress.org/Nginx">http://codex.wordpress.org/Nginx</a></p>
]]></content>
  </entry>
  
</feed>
